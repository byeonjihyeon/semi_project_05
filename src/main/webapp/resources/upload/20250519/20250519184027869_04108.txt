로그인.jsp
"javascript:void(0);" onclick="searchInfo('id')"

"javascript:void(0);" onclick="searchInfo('pw')"

function searchInfo() {
	let popupWidth = 500;
	let popupHeight = 330;

	if(gb == 'pw'){
	popupHeight = 400;
}
	
	let top = screen.availHeight / 2 - popupHeight / 2; //사용 가능 높이 / 2 - 팝업 높이 / 2
	let left = screen.availWidth / 2- popupWidth / 2; // 사용 가능 넓이 / 2 - 팝업 높이 / 2
	
	//팝업 화면 구현에 필요한 구분값('id' or 'pw' 서블릿에 전달)
	window.open("/member/searchInfoFrm?gb="+gb, "searchInfoFrm", "width=" + popupWidth + ", height=" + popupHeight + ", top=" + top + ", left + left);
}

controller

SearchInfoFrmServlet
@ member/searchInfoFrm

//.인코딩

//값추출
String gb = request.getParameter("gb"); //"id" 또는 "pw"
//로직

결과처리
RequestDispatcher view = request.getRequestDispatcher("/WEB-INF/views/member/searchInfo.jsp");
request.setAttribute("gb", gb);
view.forward(request, response);

member 
searchInfo.jsp

<h1>${gb} </h1>

header.jsp 헤더에서 java.sun.com 복붙
나머지도

<c:if test="${gb eq 'id'}">
<title>아이디 찾기</title>
</c:if>
<c:if test ="${gb eq 'pw'}">
<title>비밀번호 찾기</title>
</c:if>
<style>
.wrap{
	min-width:400px;
	height:350px;
}
.section{
	width : 400px;
	margin : 0 auto;
	display : flex;
	justify-content:center;
}
.srch-info-wrap{
	width : 90%;
	
}
.btn-wrap{
	margin-top : 15px;
	display:flex;
	justify-content : center;
	gap : 10px;
}
.btn-wrap>button{
	width : 40%;
}
.input-wrap{
	margin-top : 15px;
}
</style>


<div class="wrap">
	<main class="content srch-info-container">
		<section class="section">
			<div class="srch-info-wrap">
				<c:if test="${gb eq 'id'}">
					<div class="page-title">아이디 찾기</div>
				</c:if>
				<c:if test="${gb eq 'pw'}">
					<div class="page-title">비밀번호 찾기</div>
				</c:if>
			</div>
			<div class="srchInfo">
				<div class="input-wrap">
					<div class="input-title">
						<label for="memberEmail">이메일 입력 </label>
					</div>
					<div class="input-item"> 
						<input type="email" id="memberEmail">
					</div>
				</div>
				<c:if test="${gb eq 'pw'}">
				<div class="input-wrap">
					<div class="input-title">
						<label for="memberId">아이디 입력</label>
					</div>
					<div class="input-item"> 
						<input type="text" id="memberId">
				</div>
			</div>
			</c:if>
			</div>
		<div class="btn-wrap">
			<button type="button" class="btn-primary md" onclicl="srchInfo()">찾기</button>
			<button type="button" class="btn-secondary md" onclicl="closePop()">닫기</button>
		<section>
	</main>
</div>

<script>
function closePop() {
	self.close();
}
function srchInfo(){
	let gb = '${gb}';
	let link = '/member/searchId';
	let param = {}; //서블릿에 요청할 때 전달할 파라미터

	if($('#memberEmail').val().length < 1) {
	swal({
		title : "알림",
		text : "이메일이 입력되지 않았습니다.",
		icon : "warning"
	});
	return;
	}
	
	//비밀번호 찾기 요청일때만 아이디 값 검증	
	if(gb == 'pw') {
		if($('#memberId').val.length < 1) {
	swal({
		title : "알림",
		text : "아이디가 입력되지 않았습니다.",
		icon : "warning"
	});
	return;
	}
      	//비밀번호 찾기 요청일 때, 요청 URL 변경
	link = '/member/searchPw';
	param.memberId = $('#memberId').val();
	}
	
	//이메일은 아이디 찾기와 비밀번호 찾기 모두 서블릿에 전송해야 함.
	param.memberEmail = $('#memberEmail').val();

	//아이디 찾기, 비밀번호 찾기 각기 다른 서블릿으로 요청.
	$.ajax({
	   url : link,
	   data : param,
	   success : function(res){
		if(gb == 'id') {
			if(res == 'null'){
			res = '조회 결과 없음';
		}	
		
		$('.page-title').text($('.page-title').text() + ' 결과');
		$('.srchInfo').hide();
		$('.btn-wrap').hide();

		let html = '';
		html += '<div class="input-wrap">';
			html += '<div class="input-title">조회 결과 : ' +res + '</div>';
		html += '</div>';

		$('.srch-info-wrap').append(html);
	}else { //비밀번호 찾기 결과일 때
		if(res == 'true') {
			swal({
			title : "알림",
			text : "생성된 임시 비밀번호가 입력하신 이메일로 전송되었습니다.",
			icon : "success"
			}).then(function(){
				closePop();
			});

		}else{
		      swal({
			title : "알림",
			text : "비밀번호 찾기 중, 오류가 발생하였습니다.",
			icon : "error"
			});	
		}
	}
	},
	error : function(){
		console.log("ajax 통신 오류");
	} 
	});
}


</script>

controller
서블릿생성
SearchIdServlet

url : /member.searchId

	// 인코딩
	// 값 추출
	String memberEmail = request.getParameter("memberEmail");
	// 로직
	MemberService service = new MemberService();
	String memberId = service.searchId(memberEmail);
				
	// 결과처리(비동기)
	if(memberId != null) { //일치하는 회원 존재
	//ex) 조회된 아이디 : admin1234
	int idLength = memberId.length(); // 아이디 길이 ++++9
	String first = memberId.subString(0, 2); // ad만 추출
	String last = memberId.subString(idLength-2); // 34만 추출
	String marker = "*".repeat(idLength-4); // ***** (5개의 별표 생성)

	memberId = first + marker + last; // ad*****34
}
response.getWriter().print(memberId);

memberService.java

Connection conn = JDBCTemplate.getConnection();
String memberId = dao.searchId(conn, memberEmail);
			
JDBCTemplate.close(conn);
return memberId;

memberDao.java

PreparedStatement pstmt = null;
ResultSet rset = null;

String query = "select member_id from tbl_member where member_email = ?";

String memberId = null; //조회가 안될수도 있기때문에 null로 시작

pstmt = conn,prepareStatement(query);
	try캐치
pstmt.setString(1, memberEmail);
rset = pstmt.executeQuery();

//조건식에 사용된 member_email은 유니크 제약조건이 설정되어 있음. 조회된다면 1개만 조회됨

if(rset.next()) {
	memberId = rset.getString("member_id");
}

	finally{
	JDBCTemplate.close(rset);
	JDBCTemplate.close(pstmt);
}
return memberId; 

SearchPwServlet
url : /member/searchPw

//인코딩

//값추출
String memberEmail = request.getParameter("memberEmail");
String memberId = request.getParameter("memberId");

//로직
/* (1) 입력받은 아이디 및 이메일과 일치하는 회원이 존재하는지 체크 
   (2) 10자리의 임시 비밀번호 생성
   (3) 이메일 전송
   (4) DB에 비밀번호를 임시 비밀번호로 변경처리
*/

//(1) 입력받은 아이디 및 이메일과 일치하는 회원이 존재하는지 체크 
MemberService service = new MemberService();
String toEmail = service.searchPw(memberId, memberEmail);
			

if(toEmail != null) {
//임시 비밀번호 10자리 : 영대문자, 영소문자, 숫자, 특수문자
String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
String lower = "abcdefghijklmnopqrstuvwxyz";
String digit = "0123456789";
String special = "!@#$"

String allChar = upper + lower + digit + special;

SecureRandom random = new SecureRandom(); //난수 발생 객체
StringBuilder randomPw = new StringBuilder(); // 임시 비밀번호 10자리 저장 객체

//영대문자, 영소문자, 숫자, 특수문자 각각 최소 1개씩은 임시 비밀번호에 포함되도록 처리
randomPw.append(upper.charAt(random.nextInt(upper.length())));
randomPw.append(lower.charAt(random.nextInt(lower.length())));
randomPw.append(digit.charAt(random.nextInt(digit.length())));
randomPw.append(special.charAt(random.nextInt(special.length())));

//위에서 4자리 추가 후, 나머지 6자리 임시 비밀번호 발행 처리
for(int i=0; i<6; i++) {
	//전체 문자열에서 무작위 추출하여 추가
	randomPw.append(allChar.charAt(random.nextInt(allChar.length())));
	}
		
	//발행된 임시 비밀번호 10자리를 무작위로 섞기
	char [] charArr = randomPw.toString().toCharArray();
	for(int i=0; i<charArr.length; i++) {
	    int randomIdx = random.nextInt(charArr.length); // 0 ~ 9  난수  
	    
	char temp = charArr[i];
	charArr[i] = charArr[randomIdx];
	charArr[randomIdx] = temp;
	}

	//최종 임시 비밀번호
	String newRandomPw = new String(charArr);
		
	//1. 환경 설정 정보
		Properties prop = new Properties();
		prop.put("mail.smtp.host", "smtp.naver.com"); 		//사용 SMTP 서버명
		prop.put("mail.smtp.port", 465);			  		//사용 SMTP 포트
		prop.put("mail.smtp.auth", "true");			  		//인증 수행
		prop.put("mail.smtp.ssl.enable", "true");	  		//보안 설정 적용
		prop.put("mail.smtp.ssl.trust", "smtp.naver.com");	
		
		//2. 세션설정 및 인증 정보 설정
		Session session = Session.getDefaultInstance(prop, new Authenticator() {
				protected PasswordAuthentication getPasswordAuthentication() {
					return new PasswordAuthentication("ijs12005@naver.com", "h77777");
				}
		});
		
		//3. 이메일 관련 정보 세팅
		MimeMessage msg = new MimeMessage(session);
	
		try {
			msg.setSentDate(new Date());
			
			msg.setFrom(new InternetAddress("ijs12005@naver.com", "KH정보교육원"));
			
			InternetAddress to = new InternetAddress(toEmail); //수신자 이메일 주소
			msg.setRecipient(Message.RecipientType.TO, to);
			
			msg.setSubject("임시 비밀번호 안내"); //제목
			
			msg.setContent("회원님의 임시 비밀번호는 [<span style='color:red;'>" + newRandomPw +"</span>]", "text/html; charset=utf-8"); //본문 내용 및 형식
			
			Transport.send(msg); //이메일 전송
			
			//DB에 비밀번호 업데이트 
			int result = service.updateNewPw(memberId, newRandomPw);		
				//메소드 생성

			if(result > 0) {
				response.getWriter().print(true);
				return;
			}

		} catch (MessagingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
				
			response.getWriter().print(false);

		}else { //조회된 이메일 없을 때
			response.getWriter().print(false);
	}
		//결과 처리
}

EmailSendServlet.java 붙여넣기

//MemberService.java -----------------------------------------------------
Connection conn = JDBCTemplate.getConnection();

//임시 비밀번호 10자리 => 암호화 처리하여 DB에 업데이트
newRandomPw = BCrypt.hashpw(newRandomPw, BCrypt.gensalt());

int result = dao.updateNewPw(conn, memberId, newRandomPw);
if(result > 0) {
	JDBCTemplate.commit(conn);
}else{
	JDBCTemplate.rollback(conn);

}
	JDBCTemplate.colse(conn);
	return result;
}

MemberDao.java

PreparedStatement pstmt = null;

int result = 0;

String query = "update tbl_member set member_pw = ? where member_id = ?";

pstmt = conn.prepareStatement(query);
pstmt.setString(1, newRandomPw);
pstmt.setString(2, memberId);
result = pstmt.executeUpdate();

finally{
	JDBCTemplate.close(pstmt);
}
return result;


//결과처리

MemberService.java

Connection conn = JDBCTemplate.getConnection();
String toEmail = dao.searchPw(conn, memberId, memberEmail);
JDBCTemplate.close(conn);
return toEmail;

MemberDao.java
PreparedStatement pstmt = null;
ResultSet rset = null;

String toEmail = null;

String query = "select member_email from tbl_member where member_id = ? and member_email = ?";

pstmt = conn.preparedStatement(query);
pstmt.setString(1, memberId);
pstmt.setString(2, memberEmail);
rset = pstmt.executeQuery();
if(rset.next()) {
	toEmail = rset.getString("member_email");
}

finally{
	JDBCTemplate.close(rset);
	JDBCTemplate.close(pstmt);
}
	return toEmail;

암호화 : 중요한 정보를 저장하기 위해 복잡한 코드나 다른 형태로 변환하는 작업
평문 : 암호화되지 않은 정보(사람이 읽을 수 있는 원래의 텍스트)
복호화 : 암호화된 데이터를 원래의 평문으로 전환하는 작업 

암호화의 종류
- 대칭키 암호화 : 암호화 및 복호화 시 동일한 키(열쇠)로 암호화 및 복호화를 진행하는 것
- 비대칭키 암호화 : 공개키와 비밀키가 존재. 암호화 시 공개키로 암호화하고, 복호화 시 비밀키로 복호화
- 단방향 해시 함수 : 평문을 모두 고정된 길이의 암호화 데이터로 만들어주는 함수.
	- 종류 : SHA-256, MD5, Bcrypt 

Bcrypt
	- 단방향 해시 함수
	- 사용자가 입력한 비밀번호 길이가 달라도, 암호화된 데이터의 길이는 모두 60글자
	- 암호화할 때마다 salt라는 기능을 사용(무작위 데이터를 추가해서 암호화)